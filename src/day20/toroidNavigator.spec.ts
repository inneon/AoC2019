import { parseMap, getToEnd } from './toroidNavigator'

const map1 = `         A           
         A           
  #######.#########  
  #######.........#  
  #######.#######.#  
  #######.#######.#  
  #######.#######.#  
  #####  B    ###.#  
BC...##  C    ###.#  
  ##.##       ###.#  
  ##...DE  F  ###.#  
  #####    G  ###.#  
  #########.#####.#  
DE..#######...###.#  
  #.#########.###.#  
FG..#########.....#  
  ###########.#####  
             Z       
             Z     `

const map2 = `                   A               
                   A               
  #################.#############  
  #.#...#...................#.#.#  
  #.#.#.###.###.###.#########.#.#  
  #.#.#.......#...#.....#.#.#...#  
  #.#########.###.#####.#.#.###.#  
  #.............#.#.....#.......#  
  ###.###########.###.#####.#.#.#  
  #.....#        A   C    #.#.#.#  
  #######        S   P    #####.#  
  #.#...#                 #......VT
  #.#.#.#                 #.#####  
  #...#.#               YN....#.#  
  #.###.#                 #####.#  
DI....#.#                 #.....#  
  #####.#                 #.###.#  
ZZ......#               QG....#..AS
  ###.###                 #######  
JO..#.#.#                 #.....#  
  #.#.#.#                 ###.#.#  
  #...#..DI             BU....#..LF
  #####.#                 #.#####  
YN......#               VT..#....QG
  #.###.#                 #.###.#  
  #.#...#                 #.....#  
  ###.###    J L     J    #.#.###  
  #.....#    O F     P    #.#...#  
  #.###.#####.#.#####.#####.###.#  
  #...#.#.#...#.....#.....#.#...#  
  #.#####.###.###.#.#.#########.#  
  #...#.#.....#...#.#.#.#.....#.#  
  #.###.#####.###.###.#.#.#######  
  #.#.........#...#.............#  
  #########.###.###.#############  
           B   J   C               
           U   P   P               `

const mapA = `        A         
        A         
  ######.#########  
  ######.#########  
CC..####.#########  
  #.### B    #####  
ZZ..### B    #####  
  #.###      #####  
BB.....CC    #####  
  ################  
  ################  
  ################  
                    
                    `

const map3 = `             Z L X W       C                 
             Z P Q B       K                 
  ###########.#.#.#.#######.###############  
  #...#.......#.#.......#.#.......#.#.#...#  
  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  
  #.#...#.#.#...#.#.#...#...#...#.#.......#  
  #.###.#######.###.###.#.###.###.#.#######  
  #...#.......#.#...#...#.............#...#  
  #.#########.#######.#.#######.#######.###  
  #...#.#    F       R I       Z    #.#.#.#  
  #.###.#    D       E C       H    #.#.#.#  
  #.#...#                           #...#.#  
  #.###.#                           #.###.#  
  #.#....OA                       WB..#.#..ZH
  #.###.#                           #.#.#.#  
CJ......#                           #.....#  
  #######                           #######  
  #.#....CK                         #......IC
  #.###.#                           #.###.#  
  #.....#                           #...#.#  
  ###.###                           #.#.#.#  
XF....#.#                         RF..#.#.#  
  #####.#                           #######  
  #......CJ                       NM..#...#  
  ###.#.#                           #.###.#  
RE....#.#                           #......RF
  ###.###        X   X       L      #.#.#.#  
  #.....#        F   Q       P      #.#.#.#  
  ###.###########.###.#######.#########.###  
  #.....#...#.....#.......#...#.....#.#...#  
  #####.#.###.#######.#######.###.###.#.#.#  
  #.......#.......#.#.#.#.#...#...#...#.#.#  
  #####.###.#####.#.#.#.#.###.###.#.###.###  
  #.......#.....#.#...#...............#...#  
  #############.#.#.###.###################  
               A O F   N                     
               A A D   M                     `

describe('Toroid navigator', () => {
  it('can get the start point', () => {
    const map = map1

    const parsed = parseMap(map)

    expect(parsed.start).toEqual({ x: 9, y: 2 })
  })

  it('can get all the portals', () => {
    const map = map1

    const parsed = parseMap(map)

    expect(parsed.portals).toEqual([
      {
        name: 'AA',
        x: 9,
        y: 2,
        z: -1,
        from: {
          x: 9,
          y: 1
        }
      },
      {
        name: 'BC',
        x: 9,
        y: 6,
        z: 1,
        from: {
          x: 9,
          y: 7
        }
      },
      {
        name: 'BC',
        x: 2,
        y: 8,
        z: -1,
        from: {
          x: 1,
          y: 8
        }
      },
      {
        name: 'DE',
        x: 6,
        y: 10,
        z: 1,
        from: {
          x: 7,
          y: 10
        }
      },
      {
        name: 'FG',
        x: 11,
        y: 12,
        z: 1,
        from: {
          x: 11,
          y: 11
        }
      },
      {
        name: 'DE',
        x: 2,
        y: 13,

        z: -1,
        from: {
          x: 1,
          y: 13
        }
      },
      {
        name: 'FG',
        x: 2,
        y: 15,
        z: -1,
        from: {
          x: 1,
          y: 15
        }
      },
      {
        name: 'ZZ',
        x: 13,
        y: 16,
        z: -1,
        from: {
          x: 13,
          y: 17
        }
      }
    ])
  })

  it('gets the same result for example 1', () => {
    expect(getToEnd(map1, false)).toBe(23)
  })

  it('gets the same result for example 2', () => {
    expect(getToEnd(map2, false)).toBe(58)
  })

  it('can get back at the right level', () => {
    expect(getToEnd(mapA, true)).toBe(16)
  })

  it('gets the same result for example 3', () => {
    expect(getToEnd(map3, true)).toBe(396)
  })
})
